// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* NetConfig_detect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetConfig_detect_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetConfig_calib_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetConfig_calib_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetConfigs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetConfigs_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_config_2eproto() {
  protobuf_AddDesc_config_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "config.proto");
  GOOGLE_CHECK(file != NULL);
  NetConfig_detect_descriptor_ = file->message_type(0);
  static const int NetConfig_detect_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig_detect, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig_detect, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig_detect, modelfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig_detect, trainedfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig_detect, meanimagefile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig_detect, threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig_detect, nmsoverlap_),
  };
  NetConfig_detect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetConfig_detect_descriptor_,
      NetConfig_detect::default_instance_,
      NetConfig_detect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig_detect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig_detect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetConfig_detect));
  NetConfig_calib_descriptor_ = file->message_type(1);
  static const int NetConfig_calib_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig_calib, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig_calib, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig_calib, modelfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig_calib, trainedfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig_calib, threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig_calib, meanimagefile_),
  };
  NetConfig_calib_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetConfig_calib_descriptor_,
      NetConfig_calib::default_instance_,
      NetConfig_calib_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig_calib, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig_calib, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetConfig_calib));
  NetConfigs_descriptor_ = file->message_type(2);
  static const int NetConfigs_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfigs, modelfolder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfigs, globalnmsoverlap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfigs, detectnet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfigs, calibnet_),
  };
  NetConfigs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetConfigs_descriptor_,
      NetConfigs::default_instance_,
      NetConfigs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfigs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfigs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetConfigs));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_config_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetConfig_detect_descriptor_, &NetConfig_detect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetConfig_calib_descriptor_, &NetConfig_calib::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetConfigs_descriptor_, &NetConfigs::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_config_2eproto() {
  delete NetConfig_detect::default_instance_;
  delete NetConfig_detect_reflection_;
  delete NetConfig_calib::default_instance_;
  delete NetConfig_calib_reflection_;
  delete NetConfigs::default_instance_;
  delete NetConfigs_reflection_;
}

void protobuf_AddDesc_config_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014config.proto\"\224\001\n\020NetConfig_detect\022\014\n\004n"
    "ame\030\001 \001(\t\022\014\n\004size\030\002 \002(\005\022\021\n\tmodelFile\030\003 \002"
    "(\t\022\023\n\013trainedFile\030\004 \002(\t\022\025\n\rmeanImageFile"
    "\030\005 \002(\t\022\021\n\tthreshold\030\006 \002(\002\022\022\n\nnmsOverlap\030"
    "\007 \002(\002\"\177\n\017NetConfig_calib\022\014\n\004name\030\001 \001(\t\022\014"
    "\n\004size\030\002 \002(\005\022\021\n\tmodelFile\030\003 \002(\t\022\023\n\013train"
    "edFile\030\004 \002(\t\022\021\n\tthreshold\030\005 \002(\002\022\025\n\rmeanI"
    "mageFile\030\006 \002(\t\"\205\001\n\nNetConfigs\022\023\n\013modelFo"
    "lder\030\001 \002(\t\022\030\n\020globalNmsOverlap\030\002 \002(\002\022$\n\t"
    "detectNet\030\003 \003(\0132\021.NetConfig_detect\022\"\n\010ca"
    "libNet\030\004 \003(\0132\020.NetConfig_calib", 430);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "config.proto", &protobuf_RegisterTypes);
  NetConfig_detect::default_instance_ = new NetConfig_detect();
  NetConfig_calib::default_instance_ = new NetConfig_calib();
  NetConfigs::default_instance_ = new NetConfigs();
  NetConfig_detect::default_instance_->InitAsDefaultInstance();
  NetConfig_calib::default_instance_->InitAsDefaultInstance();
  NetConfigs::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_config_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_config_2eproto {
  StaticDescriptorInitializer_config_2eproto() {
    protobuf_AddDesc_config_2eproto();
  }
} static_descriptor_initializer_config_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NetConfig_detect::kNameFieldNumber;
const int NetConfig_detect::kSizeFieldNumber;
const int NetConfig_detect::kModelFileFieldNumber;
const int NetConfig_detect::kTrainedFileFieldNumber;
const int NetConfig_detect::kMeanImageFileFieldNumber;
const int NetConfig_detect::kThresholdFieldNumber;
const int NetConfig_detect::kNmsOverlapFieldNumber;
#endif  // !_MSC_VER

NetConfig_detect::NetConfig_detect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetConfig_detect::InitAsDefaultInstance() {
}

NetConfig_detect::NetConfig_detect(const NetConfig_detect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetConfig_detect::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = 0;
  modelfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trainedfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  meanimagefile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  threshold_ = 0;
  nmsoverlap_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetConfig_detect::~NetConfig_detect() {
  SharedDtor();
}

void NetConfig_detect::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (modelfile_ != &::google::protobuf::internal::kEmptyString) {
    delete modelfile_;
  }
  if (trainedfile_ != &::google::protobuf::internal::kEmptyString) {
    delete trainedfile_;
  }
  if (meanimagefile_ != &::google::protobuf::internal::kEmptyString) {
    delete meanimagefile_;
  }
  if (this != default_instance_) {
  }
}

void NetConfig_detect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetConfig_detect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetConfig_detect_descriptor_;
}

const NetConfig_detect& NetConfig_detect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2eproto();
  return *default_instance_;
}

NetConfig_detect* NetConfig_detect::default_instance_ = NULL;

NetConfig_detect* NetConfig_detect::New() const {
  return new NetConfig_detect;
}

void NetConfig_detect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    size_ = 0;
    if (has_modelfile()) {
      if (modelfile_ != &::google::protobuf::internal::kEmptyString) {
        modelfile_->clear();
      }
    }
    if (has_trainedfile()) {
      if (trainedfile_ != &::google::protobuf::internal::kEmptyString) {
        trainedfile_->clear();
      }
    }
    if (has_meanimagefile()) {
      if (meanimagefile_ != &::google::protobuf::internal::kEmptyString) {
        meanimagefile_->clear();
      }
    }
    threshold_ = 0;
    nmsoverlap_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetConfig_detect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required int32 size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_modelFile;
        break;
      }

      // required string modelFile = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modelFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modelfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->modelfile().data(), this->modelfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_trainedFile;
        break;
      }

      // required string trainedFile = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trainedFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trainedfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trainedfile().data(), this->trainedfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_meanImageFile;
        break;
      }

      // required string meanImageFile = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_meanImageFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meanimagefile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->meanimagefile().data(), this->meanimagefile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_threshold;
        break;
      }

      // required float threshold = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_)));
          set_has_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_nmsOverlap;
        break;
      }

      // required float nmsOverlap = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_nmsOverlap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &nmsoverlap_)));
          set_has_nmsoverlap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetConfig_detect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required int32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  // required string modelFile = 3;
  if (has_modelfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modelfile().data(), this->modelfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->modelfile(), output);
  }

  // required string trainedFile = 4;
  if (has_trainedfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trainedfile().data(), this->trainedfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->trainedfile(), output);
  }

  // required string meanImageFile = 5;
  if (has_meanimagefile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meanimagefile().data(), this->meanimagefile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->meanimagefile(), output);
  }

  // required float threshold = 6;
  if (has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->threshold(), output);
  }

  // required float nmsOverlap = 7;
  if (has_nmsoverlap()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->nmsoverlap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetConfig_detect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->size(), target);
  }

  // required string modelFile = 3;
  if (has_modelfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modelfile().data(), this->modelfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->modelfile(), target);
  }

  // required string trainedFile = 4;
  if (has_trainedfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trainedfile().data(), this->trainedfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->trainedfile(), target);
  }

  // required string meanImageFile = 5;
  if (has_meanimagefile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meanimagefile().data(), this->meanimagefile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->meanimagefile(), target);
  }

  // required float threshold = 6;
  if (has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->threshold(), target);
  }

  // required float nmsOverlap = 7;
  if (has_nmsoverlap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->nmsoverlap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetConfig_detect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // required string modelFile = 3;
    if (has_modelfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modelfile());
    }

    // required string trainedFile = 4;
    if (has_trainedfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trainedfile());
    }

    // required string meanImageFile = 5;
    if (has_meanimagefile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meanimagefile());
    }

    // required float threshold = 6;
    if (has_threshold()) {
      total_size += 1 + 4;
    }

    // required float nmsOverlap = 7;
    if (has_nmsoverlap()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetConfig_detect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetConfig_detect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetConfig_detect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetConfig_detect::MergeFrom(const NetConfig_detect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_modelfile()) {
      set_modelfile(from.modelfile());
    }
    if (from.has_trainedfile()) {
      set_trainedfile(from.trainedfile());
    }
    if (from.has_meanimagefile()) {
      set_meanimagefile(from.meanimagefile());
    }
    if (from.has_threshold()) {
      set_threshold(from.threshold());
    }
    if (from.has_nmsoverlap()) {
      set_nmsoverlap(from.nmsoverlap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetConfig_detect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetConfig_detect::CopyFrom(const NetConfig_detect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetConfig_detect::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007e) != 0x0000007e) return false;

  return true;
}

void NetConfig_detect::Swap(NetConfig_detect* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(size_, other->size_);
    std::swap(modelfile_, other->modelfile_);
    std::swap(trainedfile_, other->trainedfile_);
    std::swap(meanimagefile_, other->meanimagefile_);
    std::swap(threshold_, other->threshold_);
    std::swap(nmsoverlap_, other->nmsoverlap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetConfig_detect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetConfig_detect_descriptor_;
  metadata.reflection = NetConfig_detect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetConfig_calib::kNameFieldNumber;
const int NetConfig_calib::kSizeFieldNumber;
const int NetConfig_calib::kModelFileFieldNumber;
const int NetConfig_calib::kTrainedFileFieldNumber;
const int NetConfig_calib::kThresholdFieldNumber;
const int NetConfig_calib::kMeanImageFileFieldNumber;
#endif  // !_MSC_VER

NetConfig_calib::NetConfig_calib()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetConfig_calib::InitAsDefaultInstance() {
}

NetConfig_calib::NetConfig_calib(const NetConfig_calib& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetConfig_calib::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = 0;
  modelfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trainedfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  threshold_ = 0;
  meanimagefile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetConfig_calib::~NetConfig_calib() {
  SharedDtor();
}

void NetConfig_calib::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (modelfile_ != &::google::protobuf::internal::kEmptyString) {
    delete modelfile_;
  }
  if (trainedfile_ != &::google::protobuf::internal::kEmptyString) {
    delete trainedfile_;
  }
  if (meanimagefile_ != &::google::protobuf::internal::kEmptyString) {
    delete meanimagefile_;
  }
  if (this != default_instance_) {
  }
}

void NetConfig_calib::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetConfig_calib::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetConfig_calib_descriptor_;
}

const NetConfig_calib& NetConfig_calib::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2eproto();
  return *default_instance_;
}

NetConfig_calib* NetConfig_calib::default_instance_ = NULL;

NetConfig_calib* NetConfig_calib::New() const {
  return new NetConfig_calib;
}

void NetConfig_calib::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    size_ = 0;
    if (has_modelfile()) {
      if (modelfile_ != &::google::protobuf::internal::kEmptyString) {
        modelfile_->clear();
      }
    }
    if (has_trainedfile()) {
      if (trainedfile_ != &::google::protobuf::internal::kEmptyString) {
        trainedfile_->clear();
      }
    }
    threshold_ = 0;
    if (has_meanimagefile()) {
      if (meanimagefile_ != &::google::protobuf::internal::kEmptyString) {
        meanimagefile_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetConfig_calib::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required int32 size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_modelFile;
        break;
      }

      // required string modelFile = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modelFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modelfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->modelfile().data(), this->modelfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_trainedFile;
        break;
      }

      // required string trainedFile = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trainedFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trainedfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trainedfile().data(), this->trainedfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_threshold;
        break;
      }

      // required float threshold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_)));
          set_has_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_meanImageFile;
        break;
      }

      // required string meanImageFile = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_meanImageFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meanimagefile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->meanimagefile().data(), this->meanimagefile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetConfig_calib::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required int32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  // required string modelFile = 3;
  if (has_modelfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modelfile().data(), this->modelfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->modelfile(), output);
  }

  // required string trainedFile = 4;
  if (has_trainedfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trainedfile().data(), this->trainedfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->trainedfile(), output);
  }

  // required float threshold = 5;
  if (has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->threshold(), output);
  }

  // required string meanImageFile = 6;
  if (has_meanimagefile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meanimagefile().data(), this->meanimagefile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->meanimagefile(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetConfig_calib::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->size(), target);
  }

  // required string modelFile = 3;
  if (has_modelfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modelfile().data(), this->modelfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->modelfile(), target);
  }

  // required string trainedFile = 4;
  if (has_trainedfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trainedfile().data(), this->trainedfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->trainedfile(), target);
  }

  // required float threshold = 5;
  if (has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->threshold(), target);
  }

  // required string meanImageFile = 6;
  if (has_meanimagefile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meanimagefile().data(), this->meanimagefile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->meanimagefile(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetConfig_calib::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // required string modelFile = 3;
    if (has_modelfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modelfile());
    }

    // required string trainedFile = 4;
    if (has_trainedfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trainedfile());
    }

    // required float threshold = 5;
    if (has_threshold()) {
      total_size += 1 + 4;
    }

    // required string meanImageFile = 6;
    if (has_meanimagefile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meanimagefile());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetConfig_calib::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetConfig_calib* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetConfig_calib*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetConfig_calib::MergeFrom(const NetConfig_calib& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_modelfile()) {
      set_modelfile(from.modelfile());
    }
    if (from.has_trainedfile()) {
      set_trainedfile(from.trainedfile());
    }
    if (from.has_threshold()) {
      set_threshold(from.threshold());
    }
    if (from.has_meanimagefile()) {
      set_meanimagefile(from.meanimagefile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetConfig_calib::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetConfig_calib::CopyFrom(const NetConfig_calib& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetConfig_calib::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003e) != 0x0000003e) return false;

  return true;
}

void NetConfig_calib::Swap(NetConfig_calib* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(size_, other->size_);
    std::swap(modelfile_, other->modelfile_);
    std::swap(trainedfile_, other->trainedfile_);
    std::swap(threshold_, other->threshold_);
    std::swap(meanimagefile_, other->meanimagefile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetConfig_calib::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetConfig_calib_descriptor_;
  metadata.reflection = NetConfig_calib_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetConfigs::kModelFolderFieldNumber;
const int NetConfigs::kGlobalNmsOverlapFieldNumber;
const int NetConfigs::kDetectNetFieldNumber;
const int NetConfigs::kCalibNetFieldNumber;
#endif  // !_MSC_VER

NetConfigs::NetConfigs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetConfigs::InitAsDefaultInstance() {
}

NetConfigs::NetConfigs(const NetConfigs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetConfigs::SharedCtor() {
  _cached_size_ = 0;
  modelfolder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  globalnmsoverlap_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetConfigs::~NetConfigs() {
  SharedDtor();
}

void NetConfigs::SharedDtor() {
  if (modelfolder_ != &::google::protobuf::internal::kEmptyString) {
    delete modelfolder_;
  }
  if (this != default_instance_) {
  }
}

void NetConfigs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetConfigs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetConfigs_descriptor_;
}

const NetConfigs& NetConfigs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2eproto();
  return *default_instance_;
}

NetConfigs* NetConfigs::default_instance_ = NULL;

NetConfigs* NetConfigs::New() const {
  return new NetConfigs;
}

void NetConfigs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_modelfolder()) {
      if (modelfolder_ != &::google::protobuf::internal::kEmptyString) {
        modelfolder_->clear();
      }
    }
    globalnmsoverlap_ = 0;
  }
  detectnet_.Clear();
  calibnet_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetConfigs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string modelFolder = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modelfolder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->modelfolder().data(), this->modelfolder().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_globalNmsOverlap;
        break;
      }

      // required float globalNmsOverlap = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_globalNmsOverlap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &globalnmsoverlap_)));
          set_has_globalnmsoverlap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_detectNet;
        break;
      }

      // repeated .NetConfig_detect detectNet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detectNet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detectnet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_detectNet;
        if (input->ExpectTag(34)) goto parse_calibNet;
        break;
      }

      // repeated .NetConfig_calib calibNet = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_calibNet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_calibnet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_calibNet;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetConfigs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string modelFolder = 1;
  if (has_modelfolder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modelfolder().data(), this->modelfolder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->modelfolder(), output);
  }

  // required float globalNmsOverlap = 2;
  if (has_globalnmsoverlap()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->globalnmsoverlap(), output);
  }

  // repeated .NetConfig_detect detectNet = 3;
  for (int i = 0; i < this->detectnet_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->detectnet(i), output);
  }

  // repeated .NetConfig_calib calibNet = 4;
  for (int i = 0; i < this->calibnet_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->calibnet(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetConfigs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string modelFolder = 1;
  if (has_modelfolder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modelfolder().data(), this->modelfolder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->modelfolder(), target);
  }

  // required float globalNmsOverlap = 2;
  if (has_globalnmsoverlap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->globalnmsoverlap(), target);
  }

  // repeated .NetConfig_detect detectNet = 3;
  for (int i = 0; i < this->detectnet_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->detectnet(i), target);
  }

  // repeated .NetConfig_calib calibNet = 4;
  for (int i = 0; i < this->calibnet_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->calibnet(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetConfigs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string modelFolder = 1;
    if (has_modelfolder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modelfolder());
    }

    // required float globalNmsOverlap = 2;
    if (has_globalnmsoverlap()) {
      total_size += 1 + 4;
    }

  }
  // repeated .NetConfig_detect detectNet = 3;
  total_size += 1 * this->detectnet_size();
  for (int i = 0; i < this->detectnet_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detectnet(i));
  }

  // repeated .NetConfig_calib calibNet = 4;
  total_size += 1 * this->calibnet_size();
  for (int i = 0; i < this->calibnet_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->calibnet(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetConfigs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetConfigs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetConfigs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetConfigs::MergeFrom(const NetConfigs& from) {
  GOOGLE_CHECK_NE(&from, this);
  detectnet_.MergeFrom(from.detectnet_);
  calibnet_.MergeFrom(from.calibnet_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modelfolder()) {
      set_modelfolder(from.modelfolder());
    }
    if (from.has_globalnmsoverlap()) {
      set_globalnmsoverlap(from.globalnmsoverlap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetConfigs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetConfigs::CopyFrom(const NetConfigs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetConfigs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < detectnet_size(); i++) {
    if (!this->detectnet(i).IsInitialized()) return false;
  }
  for (int i = 0; i < calibnet_size(); i++) {
    if (!this->calibnet(i).IsInitialized()) return false;
  }
  return true;
}

void NetConfigs::Swap(NetConfigs* other) {
  if (other != this) {
    std::swap(modelfolder_, other->modelfolder_);
    std::swap(globalnmsoverlap_, other->globalnmsoverlap_);
    detectnet_.Swap(&other->detectnet_);
    calibnet_.Swap(&other->calibnet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetConfigs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetConfigs_descriptor_;
  metadata.reflection = NetConfigs_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
