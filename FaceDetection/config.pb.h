// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#ifndef PROTOBUF_config_2eproto__INCLUDED
#define PROTOBUF_config_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_config_2eproto();
void protobuf_AssignDesc_config_2eproto();
void protobuf_ShutdownFile_config_2eproto();

class NetConfig_detect;
class NetConfig_calib;
class NetConfigs;

// ===================================================================

class NetConfig_detect : public ::google::protobuf::Message {
 public:
  NetConfig_detect();
  virtual ~NetConfig_detect();

  NetConfig_detect(const NetConfig_detect& from);

  inline NetConfig_detect& operator=(const NetConfig_detect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetConfig_detect& default_instance();

  void Swap(NetConfig_detect* other);

  // implements Message ----------------------------------------------

  NetConfig_detect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetConfig_detect& from);
  void MergeFrom(const NetConfig_detect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // required string modelFile = 3;
  inline bool has_modelfile() const;
  inline void clear_modelfile();
  static const int kModelFileFieldNumber = 3;
  inline const ::std::string& modelfile() const;
  inline void set_modelfile(const ::std::string& value);
  inline void set_modelfile(const char* value);
  inline void set_modelfile(const char* value, size_t size);
  inline ::std::string* mutable_modelfile();
  inline ::std::string* release_modelfile();
  inline void set_allocated_modelfile(::std::string* modelfile);

  // required string trainedFile = 4;
  inline bool has_trainedfile() const;
  inline void clear_trainedfile();
  static const int kTrainedFileFieldNumber = 4;
  inline const ::std::string& trainedfile() const;
  inline void set_trainedfile(const ::std::string& value);
  inline void set_trainedfile(const char* value);
  inline void set_trainedfile(const char* value, size_t size);
  inline ::std::string* mutable_trainedfile();
  inline ::std::string* release_trainedfile();
  inline void set_allocated_trainedfile(::std::string* trainedfile);

  // required string meanImageFile = 5;
  inline bool has_meanimagefile() const;
  inline void clear_meanimagefile();
  static const int kMeanImageFileFieldNumber = 5;
  inline const ::std::string& meanimagefile() const;
  inline void set_meanimagefile(const ::std::string& value);
  inline void set_meanimagefile(const char* value);
  inline void set_meanimagefile(const char* value, size_t size);
  inline ::std::string* mutable_meanimagefile();
  inline ::std::string* release_meanimagefile();
  inline void set_allocated_meanimagefile(::std::string* meanimagefile);

  // required float threshold = 6;
  inline bool has_threshold() const;
  inline void clear_threshold();
  static const int kThresholdFieldNumber = 6;
  inline float threshold() const;
  inline void set_threshold(float value);

  // required float nmsOverlap = 7;
  inline bool has_nmsoverlap() const;
  inline void clear_nmsoverlap();
  static const int kNmsOverlapFieldNumber = 7;
  inline float nmsoverlap() const;
  inline void set_nmsoverlap(float value);

  // @@protoc_insertion_point(class_scope:NetConfig_detect)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_modelfile();
  inline void clear_has_modelfile();
  inline void set_has_trainedfile();
  inline void clear_has_trainedfile();
  inline void set_has_meanimagefile();
  inline void clear_has_meanimagefile();
  inline void set_has_threshold();
  inline void clear_has_threshold();
  inline void set_has_nmsoverlap();
  inline void clear_has_nmsoverlap();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* modelfile_;
  ::std::string* trainedfile_;
  ::google::protobuf::int32 size_;
  float threshold_;
  ::std::string* meanimagefile_;
  float nmsoverlap_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static NetConfig_detect* default_instance_;
};
// -------------------------------------------------------------------

class NetConfig_calib : public ::google::protobuf::Message {
 public:
  NetConfig_calib();
  virtual ~NetConfig_calib();

  NetConfig_calib(const NetConfig_calib& from);

  inline NetConfig_calib& operator=(const NetConfig_calib& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetConfig_calib& default_instance();

  void Swap(NetConfig_calib* other);

  // implements Message ----------------------------------------------

  NetConfig_calib* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetConfig_calib& from);
  void MergeFrom(const NetConfig_calib& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // required string modelFile = 3;
  inline bool has_modelfile() const;
  inline void clear_modelfile();
  static const int kModelFileFieldNumber = 3;
  inline const ::std::string& modelfile() const;
  inline void set_modelfile(const ::std::string& value);
  inline void set_modelfile(const char* value);
  inline void set_modelfile(const char* value, size_t size);
  inline ::std::string* mutable_modelfile();
  inline ::std::string* release_modelfile();
  inline void set_allocated_modelfile(::std::string* modelfile);

  // required string trainedFile = 4;
  inline bool has_trainedfile() const;
  inline void clear_trainedfile();
  static const int kTrainedFileFieldNumber = 4;
  inline const ::std::string& trainedfile() const;
  inline void set_trainedfile(const ::std::string& value);
  inline void set_trainedfile(const char* value);
  inline void set_trainedfile(const char* value, size_t size);
  inline ::std::string* mutable_trainedfile();
  inline ::std::string* release_trainedfile();
  inline void set_allocated_trainedfile(::std::string* trainedfile);

  // required float threshold = 5;
  inline bool has_threshold() const;
  inline void clear_threshold();
  static const int kThresholdFieldNumber = 5;
  inline float threshold() const;
  inline void set_threshold(float value);

  // required string meanImageFile = 6;
  inline bool has_meanimagefile() const;
  inline void clear_meanimagefile();
  static const int kMeanImageFileFieldNumber = 6;
  inline const ::std::string& meanimagefile() const;
  inline void set_meanimagefile(const ::std::string& value);
  inline void set_meanimagefile(const char* value);
  inline void set_meanimagefile(const char* value, size_t size);
  inline ::std::string* mutable_meanimagefile();
  inline ::std::string* release_meanimagefile();
  inline void set_allocated_meanimagefile(::std::string* meanimagefile);

  // @@protoc_insertion_point(class_scope:NetConfig_calib)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_modelfile();
  inline void clear_has_modelfile();
  inline void set_has_trainedfile();
  inline void clear_has_trainedfile();
  inline void set_has_threshold();
  inline void clear_has_threshold();
  inline void set_has_meanimagefile();
  inline void clear_has_meanimagefile();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* modelfile_;
  ::google::protobuf::int32 size_;
  float threshold_;
  ::std::string* trainedfile_;
  ::std::string* meanimagefile_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static NetConfig_calib* default_instance_;
};
// -------------------------------------------------------------------

class NetConfigs : public ::google::protobuf::Message {
 public:
  NetConfigs();
  virtual ~NetConfigs();

  NetConfigs(const NetConfigs& from);

  inline NetConfigs& operator=(const NetConfigs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetConfigs& default_instance();

  void Swap(NetConfigs* other);

  // implements Message ----------------------------------------------

  NetConfigs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetConfigs& from);
  void MergeFrom(const NetConfigs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string modelFolder = 1;
  inline bool has_modelfolder() const;
  inline void clear_modelfolder();
  static const int kModelFolderFieldNumber = 1;
  inline const ::std::string& modelfolder() const;
  inline void set_modelfolder(const ::std::string& value);
  inline void set_modelfolder(const char* value);
  inline void set_modelfolder(const char* value, size_t size);
  inline ::std::string* mutable_modelfolder();
  inline ::std::string* release_modelfolder();
  inline void set_allocated_modelfolder(::std::string* modelfolder);

  // required float globalNmsOverlap = 2;
  inline bool has_globalnmsoverlap() const;
  inline void clear_globalnmsoverlap();
  static const int kGlobalNmsOverlapFieldNumber = 2;
  inline float globalnmsoverlap() const;
  inline void set_globalnmsoverlap(float value);

  // repeated .NetConfig_detect detectNet = 3;
  inline int detectnet_size() const;
  inline void clear_detectnet();
  static const int kDetectNetFieldNumber = 3;
  inline const ::NetConfig_detect& detectnet(int index) const;
  inline ::NetConfig_detect* mutable_detectnet(int index);
  inline ::NetConfig_detect* add_detectnet();
  inline const ::google::protobuf::RepeatedPtrField< ::NetConfig_detect >&
      detectnet() const;
  inline ::google::protobuf::RepeatedPtrField< ::NetConfig_detect >*
      mutable_detectnet();

  // repeated .NetConfig_calib calibNet = 4;
  inline int calibnet_size() const;
  inline void clear_calibnet();
  static const int kCalibNetFieldNumber = 4;
  inline const ::NetConfig_calib& calibnet(int index) const;
  inline ::NetConfig_calib* mutable_calibnet(int index);
  inline ::NetConfig_calib* add_calibnet();
  inline const ::google::protobuf::RepeatedPtrField< ::NetConfig_calib >&
      calibnet() const;
  inline ::google::protobuf::RepeatedPtrField< ::NetConfig_calib >*
      mutable_calibnet();

  // @@protoc_insertion_point(class_scope:NetConfigs)
 private:
  inline void set_has_modelfolder();
  inline void clear_has_modelfolder();
  inline void set_has_globalnmsoverlap();
  inline void clear_has_globalnmsoverlap();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* modelfolder_;
  ::google::protobuf::RepeatedPtrField< ::NetConfig_detect > detectnet_;
  ::google::protobuf::RepeatedPtrField< ::NetConfig_calib > calibnet_;
  float globalnmsoverlap_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static NetConfigs* default_instance_;
};
// ===================================================================


// ===================================================================

// NetConfig_detect

// optional string name = 1;
inline bool NetConfig_detect::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetConfig_detect::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetConfig_detect::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetConfig_detect::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NetConfig_detect::name() const {
  return *name_;
}
inline void NetConfig_detect::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NetConfig_detect::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NetConfig_detect::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetConfig_detect::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* NetConfig_detect::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NetConfig_detect::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 size = 2;
inline bool NetConfig_detect::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetConfig_detect::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetConfig_detect::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetConfig_detect::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 NetConfig_detect::size() const {
  return size_;
}
inline void NetConfig_detect::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// required string modelFile = 3;
inline bool NetConfig_detect::has_modelfile() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetConfig_detect::set_has_modelfile() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetConfig_detect::clear_has_modelfile() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetConfig_detect::clear_modelfile() {
  if (modelfile_ != &::google::protobuf::internal::kEmptyString) {
    modelfile_->clear();
  }
  clear_has_modelfile();
}
inline const ::std::string& NetConfig_detect::modelfile() const {
  return *modelfile_;
}
inline void NetConfig_detect::set_modelfile(const ::std::string& value) {
  set_has_modelfile();
  if (modelfile_ == &::google::protobuf::internal::kEmptyString) {
    modelfile_ = new ::std::string;
  }
  modelfile_->assign(value);
}
inline void NetConfig_detect::set_modelfile(const char* value) {
  set_has_modelfile();
  if (modelfile_ == &::google::protobuf::internal::kEmptyString) {
    modelfile_ = new ::std::string;
  }
  modelfile_->assign(value);
}
inline void NetConfig_detect::set_modelfile(const char* value, size_t size) {
  set_has_modelfile();
  if (modelfile_ == &::google::protobuf::internal::kEmptyString) {
    modelfile_ = new ::std::string;
  }
  modelfile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetConfig_detect::mutable_modelfile() {
  set_has_modelfile();
  if (modelfile_ == &::google::protobuf::internal::kEmptyString) {
    modelfile_ = new ::std::string;
  }
  return modelfile_;
}
inline ::std::string* NetConfig_detect::release_modelfile() {
  clear_has_modelfile();
  if (modelfile_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = modelfile_;
    modelfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NetConfig_detect::set_allocated_modelfile(::std::string* modelfile) {
  if (modelfile_ != &::google::protobuf::internal::kEmptyString) {
    delete modelfile_;
  }
  if (modelfile) {
    set_has_modelfile();
    modelfile_ = modelfile;
  } else {
    clear_has_modelfile();
    modelfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string trainedFile = 4;
inline bool NetConfig_detect::has_trainedfile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetConfig_detect::set_has_trainedfile() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetConfig_detect::clear_has_trainedfile() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetConfig_detect::clear_trainedfile() {
  if (trainedfile_ != &::google::protobuf::internal::kEmptyString) {
    trainedfile_->clear();
  }
  clear_has_trainedfile();
}
inline const ::std::string& NetConfig_detect::trainedfile() const {
  return *trainedfile_;
}
inline void NetConfig_detect::set_trainedfile(const ::std::string& value) {
  set_has_trainedfile();
  if (trainedfile_ == &::google::protobuf::internal::kEmptyString) {
    trainedfile_ = new ::std::string;
  }
  trainedfile_->assign(value);
}
inline void NetConfig_detect::set_trainedfile(const char* value) {
  set_has_trainedfile();
  if (trainedfile_ == &::google::protobuf::internal::kEmptyString) {
    trainedfile_ = new ::std::string;
  }
  trainedfile_->assign(value);
}
inline void NetConfig_detect::set_trainedfile(const char* value, size_t size) {
  set_has_trainedfile();
  if (trainedfile_ == &::google::protobuf::internal::kEmptyString) {
    trainedfile_ = new ::std::string;
  }
  trainedfile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetConfig_detect::mutable_trainedfile() {
  set_has_trainedfile();
  if (trainedfile_ == &::google::protobuf::internal::kEmptyString) {
    trainedfile_ = new ::std::string;
  }
  return trainedfile_;
}
inline ::std::string* NetConfig_detect::release_trainedfile() {
  clear_has_trainedfile();
  if (trainedfile_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = trainedfile_;
    trainedfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NetConfig_detect::set_allocated_trainedfile(::std::string* trainedfile) {
  if (trainedfile_ != &::google::protobuf::internal::kEmptyString) {
    delete trainedfile_;
  }
  if (trainedfile) {
    set_has_trainedfile();
    trainedfile_ = trainedfile;
  } else {
    clear_has_trainedfile();
    trainedfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string meanImageFile = 5;
inline bool NetConfig_detect::has_meanimagefile() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetConfig_detect::set_has_meanimagefile() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetConfig_detect::clear_has_meanimagefile() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetConfig_detect::clear_meanimagefile() {
  if (meanimagefile_ != &::google::protobuf::internal::kEmptyString) {
    meanimagefile_->clear();
  }
  clear_has_meanimagefile();
}
inline const ::std::string& NetConfig_detect::meanimagefile() const {
  return *meanimagefile_;
}
inline void NetConfig_detect::set_meanimagefile(const ::std::string& value) {
  set_has_meanimagefile();
  if (meanimagefile_ == &::google::protobuf::internal::kEmptyString) {
    meanimagefile_ = new ::std::string;
  }
  meanimagefile_->assign(value);
}
inline void NetConfig_detect::set_meanimagefile(const char* value) {
  set_has_meanimagefile();
  if (meanimagefile_ == &::google::protobuf::internal::kEmptyString) {
    meanimagefile_ = new ::std::string;
  }
  meanimagefile_->assign(value);
}
inline void NetConfig_detect::set_meanimagefile(const char* value, size_t size) {
  set_has_meanimagefile();
  if (meanimagefile_ == &::google::protobuf::internal::kEmptyString) {
    meanimagefile_ = new ::std::string;
  }
  meanimagefile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetConfig_detect::mutable_meanimagefile() {
  set_has_meanimagefile();
  if (meanimagefile_ == &::google::protobuf::internal::kEmptyString) {
    meanimagefile_ = new ::std::string;
  }
  return meanimagefile_;
}
inline ::std::string* NetConfig_detect::release_meanimagefile() {
  clear_has_meanimagefile();
  if (meanimagefile_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = meanimagefile_;
    meanimagefile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NetConfig_detect::set_allocated_meanimagefile(::std::string* meanimagefile) {
  if (meanimagefile_ != &::google::protobuf::internal::kEmptyString) {
    delete meanimagefile_;
  }
  if (meanimagefile) {
    set_has_meanimagefile();
    meanimagefile_ = meanimagefile;
  } else {
    clear_has_meanimagefile();
    meanimagefile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required float threshold = 6;
inline bool NetConfig_detect::has_threshold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetConfig_detect::set_has_threshold() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetConfig_detect::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetConfig_detect::clear_threshold() {
  threshold_ = 0;
  clear_has_threshold();
}
inline float NetConfig_detect::threshold() const {
  return threshold_;
}
inline void NetConfig_detect::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
}

// required float nmsOverlap = 7;
inline bool NetConfig_detect::has_nmsoverlap() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NetConfig_detect::set_has_nmsoverlap() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NetConfig_detect::clear_has_nmsoverlap() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NetConfig_detect::clear_nmsoverlap() {
  nmsoverlap_ = 0;
  clear_has_nmsoverlap();
}
inline float NetConfig_detect::nmsoverlap() const {
  return nmsoverlap_;
}
inline void NetConfig_detect::set_nmsoverlap(float value) {
  set_has_nmsoverlap();
  nmsoverlap_ = value;
}

// -------------------------------------------------------------------

// NetConfig_calib

// optional string name = 1;
inline bool NetConfig_calib::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetConfig_calib::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetConfig_calib::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetConfig_calib::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NetConfig_calib::name() const {
  return *name_;
}
inline void NetConfig_calib::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NetConfig_calib::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NetConfig_calib::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetConfig_calib::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* NetConfig_calib::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NetConfig_calib::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 size = 2;
inline bool NetConfig_calib::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetConfig_calib::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetConfig_calib::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetConfig_calib::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 NetConfig_calib::size() const {
  return size_;
}
inline void NetConfig_calib::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// required string modelFile = 3;
inline bool NetConfig_calib::has_modelfile() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetConfig_calib::set_has_modelfile() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetConfig_calib::clear_has_modelfile() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetConfig_calib::clear_modelfile() {
  if (modelfile_ != &::google::protobuf::internal::kEmptyString) {
    modelfile_->clear();
  }
  clear_has_modelfile();
}
inline const ::std::string& NetConfig_calib::modelfile() const {
  return *modelfile_;
}
inline void NetConfig_calib::set_modelfile(const ::std::string& value) {
  set_has_modelfile();
  if (modelfile_ == &::google::protobuf::internal::kEmptyString) {
    modelfile_ = new ::std::string;
  }
  modelfile_->assign(value);
}
inline void NetConfig_calib::set_modelfile(const char* value) {
  set_has_modelfile();
  if (modelfile_ == &::google::protobuf::internal::kEmptyString) {
    modelfile_ = new ::std::string;
  }
  modelfile_->assign(value);
}
inline void NetConfig_calib::set_modelfile(const char* value, size_t size) {
  set_has_modelfile();
  if (modelfile_ == &::google::protobuf::internal::kEmptyString) {
    modelfile_ = new ::std::string;
  }
  modelfile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetConfig_calib::mutable_modelfile() {
  set_has_modelfile();
  if (modelfile_ == &::google::protobuf::internal::kEmptyString) {
    modelfile_ = new ::std::string;
  }
  return modelfile_;
}
inline ::std::string* NetConfig_calib::release_modelfile() {
  clear_has_modelfile();
  if (modelfile_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = modelfile_;
    modelfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NetConfig_calib::set_allocated_modelfile(::std::string* modelfile) {
  if (modelfile_ != &::google::protobuf::internal::kEmptyString) {
    delete modelfile_;
  }
  if (modelfile) {
    set_has_modelfile();
    modelfile_ = modelfile;
  } else {
    clear_has_modelfile();
    modelfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string trainedFile = 4;
inline bool NetConfig_calib::has_trainedfile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetConfig_calib::set_has_trainedfile() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetConfig_calib::clear_has_trainedfile() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetConfig_calib::clear_trainedfile() {
  if (trainedfile_ != &::google::protobuf::internal::kEmptyString) {
    trainedfile_->clear();
  }
  clear_has_trainedfile();
}
inline const ::std::string& NetConfig_calib::trainedfile() const {
  return *trainedfile_;
}
inline void NetConfig_calib::set_trainedfile(const ::std::string& value) {
  set_has_trainedfile();
  if (trainedfile_ == &::google::protobuf::internal::kEmptyString) {
    trainedfile_ = new ::std::string;
  }
  trainedfile_->assign(value);
}
inline void NetConfig_calib::set_trainedfile(const char* value) {
  set_has_trainedfile();
  if (trainedfile_ == &::google::protobuf::internal::kEmptyString) {
    trainedfile_ = new ::std::string;
  }
  trainedfile_->assign(value);
}
inline void NetConfig_calib::set_trainedfile(const char* value, size_t size) {
  set_has_trainedfile();
  if (trainedfile_ == &::google::protobuf::internal::kEmptyString) {
    trainedfile_ = new ::std::string;
  }
  trainedfile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetConfig_calib::mutable_trainedfile() {
  set_has_trainedfile();
  if (trainedfile_ == &::google::protobuf::internal::kEmptyString) {
    trainedfile_ = new ::std::string;
  }
  return trainedfile_;
}
inline ::std::string* NetConfig_calib::release_trainedfile() {
  clear_has_trainedfile();
  if (trainedfile_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = trainedfile_;
    trainedfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NetConfig_calib::set_allocated_trainedfile(::std::string* trainedfile) {
  if (trainedfile_ != &::google::protobuf::internal::kEmptyString) {
    delete trainedfile_;
  }
  if (trainedfile) {
    set_has_trainedfile();
    trainedfile_ = trainedfile;
  } else {
    clear_has_trainedfile();
    trainedfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required float threshold = 5;
inline bool NetConfig_calib::has_threshold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetConfig_calib::set_has_threshold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetConfig_calib::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetConfig_calib::clear_threshold() {
  threshold_ = 0;
  clear_has_threshold();
}
inline float NetConfig_calib::threshold() const {
  return threshold_;
}
inline void NetConfig_calib::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
}

// required string meanImageFile = 6;
inline bool NetConfig_calib::has_meanimagefile() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetConfig_calib::set_has_meanimagefile() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetConfig_calib::clear_has_meanimagefile() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetConfig_calib::clear_meanimagefile() {
  if (meanimagefile_ != &::google::protobuf::internal::kEmptyString) {
    meanimagefile_->clear();
  }
  clear_has_meanimagefile();
}
inline const ::std::string& NetConfig_calib::meanimagefile() const {
  return *meanimagefile_;
}
inline void NetConfig_calib::set_meanimagefile(const ::std::string& value) {
  set_has_meanimagefile();
  if (meanimagefile_ == &::google::protobuf::internal::kEmptyString) {
    meanimagefile_ = new ::std::string;
  }
  meanimagefile_->assign(value);
}
inline void NetConfig_calib::set_meanimagefile(const char* value) {
  set_has_meanimagefile();
  if (meanimagefile_ == &::google::protobuf::internal::kEmptyString) {
    meanimagefile_ = new ::std::string;
  }
  meanimagefile_->assign(value);
}
inline void NetConfig_calib::set_meanimagefile(const char* value, size_t size) {
  set_has_meanimagefile();
  if (meanimagefile_ == &::google::protobuf::internal::kEmptyString) {
    meanimagefile_ = new ::std::string;
  }
  meanimagefile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetConfig_calib::mutable_meanimagefile() {
  set_has_meanimagefile();
  if (meanimagefile_ == &::google::protobuf::internal::kEmptyString) {
    meanimagefile_ = new ::std::string;
  }
  return meanimagefile_;
}
inline ::std::string* NetConfig_calib::release_meanimagefile() {
  clear_has_meanimagefile();
  if (meanimagefile_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = meanimagefile_;
    meanimagefile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NetConfig_calib::set_allocated_meanimagefile(::std::string* meanimagefile) {
  if (meanimagefile_ != &::google::protobuf::internal::kEmptyString) {
    delete meanimagefile_;
  }
  if (meanimagefile) {
    set_has_meanimagefile();
    meanimagefile_ = meanimagefile;
  } else {
    clear_has_meanimagefile();
    meanimagefile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// NetConfigs

// required string modelFolder = 1;
inline bool NetConfigs::has_modelfolder() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetConfigs::set_has_modelfolder() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetConfigs::clear_has_modelfolder() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetConfigs::clear_modelfolder() {
  if (modelfolder_ != &::google::protobuf::internal::kEmptyString) {
    modelfolder_->clear();
  }
  clear_has_modelfolder();
}
inline const ::std::string& NetConfigs::modelfolder() const {
  return *modelfolder_;
}
inline void NetConfigs::set_modelfolder(const ::std::string& value) {
  set_has_modelfolder();
  if (modelfolder_ == &::google::protobuf::internal::kEmptyString) {
    modelfolder_ = new ::std::string;
  }
  modelfolder_->assign(value);
}
inline void NetConfigs::set_modelfolder(const char* value) {
  set_has_modelfolder();
  if (modelfolder_ == &::google::protobuf::internal::kEmptyString) {
    modelfolder_ = new ::std::string;
  }
  modelfolder_->assign(value);
}
inline void NetConfigs::set_modelfolder(const char* value, size_t size) {
  set_has_modelfolder();
  if (modelfolder_ == &::google::protobuf::internal::kEmptyString) {
    modelfolder_ = new ::std::string;
  }
  modelfolder_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetConfigs::mutable_modelfolder() {
  set_has_modelfolder();
  if (modelfolder_ == &::google::protobuf::internal::kEmptyString) {
    modelfolder_ = new ::std::string;
  }
  return modelfolder_;
}
inline ::std::string* NetConfigs::release_modelfolder() {
  clear_has_modelfolder();
  if (modelfolder_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = modelfolder_;
    modelfolder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NetConfigs::set_allocated_modelfolder(::std::string* modelfolder) {
  if (modelfolder_ != &::google::protobuf::internal::kEmptyString) {
    delete modelfolder_;
  }
  if (modelfolder) {
    set_has_modelfolder();
    modelfolder_ = modelfolder;
  } else {
    clear_has_modelfolder();
    modelfolder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required float globalNmsOverlap = 2;
inline bool NetConfigs::has_globalnmsoverlap() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetConfigs::set_has_globalnmsoverlap() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetConfigs::clear_has_globalnmsoverlap() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetConfigs::clear_globalnmsoverlap() {
  globalnmsoverlap_ = 0;
  clear_has_globalnmsoverlap();
}
inline float NetConfigs::globalnmsoverlap() const {
  return globalnmsoverlap_;
}
inline void NetConfigs::set_globalnmsoverlap(float value) {
  set_has_globalnmsoverlap();
  globalnmsoverlap_ = value;
}

// repeated .NetConfig_detect detectNet = 3;
inline int NetConfigs::detectnet_size() const {
  return detectnet_.size();
}
inline void NetConfigs::clear_detectnet() {
  detectnet_.Clear();
}
inline const ::NetConfig_detect& NetConfigs::detectnet(int index) const {
  return detectnet_.Get(index);
}
inline ::NetConfig_detect* NetConfigs::mutable_detectnet(int index) {
  return detectnet_.Mutable(index);
}
inline ::NetConfig_detect* NetConfigs::add_detectnet() {
  return detectnet_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NetConfig_detect >&
NetConfigs::detectnet() const {
  return detectnet_;
}
inline ::google::protobuf::RepeatedPtrField< ::NetConfig_detect >*
NetConfigs::mutable_detectnet() {
  return &detectnet_;
}

// repeated .NetConfig_calib calibNet = 4;
inline int NetConfigs::calibnet_size() const {
  return calibnet_.size();
}
inline void NetConfigs::clear_calibnet() {
  calibnet_.Clear();
}
inline const ::NetConfig_calib& NetConfigs::calibnet(int index) const {
  return calibnet_.Get(index);
}
inline ::NetConfig_calib* NetConfigs::mutable_calibnet(int index) {
  return calibnet_.Mutable(index);
}
inline ::NetConfig_calib* NetConfigs::add_calibnet() {
  return calibnet_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NetConfig_calib >&
NetConfigs::calibnet() const {
  return calibnet_;
}
inline ::google::protobuf::RepeatedPtrField< ::NetConfig_calib >*
NetConfigs::mutable_calibnet() {
  return &calibnet_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_config_2eproto__INCLUDED
