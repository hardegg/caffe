name: "FaceCascade_detection48"
layer {
  name: "data_d48"
  top: "data_d48"
  top: "label_d48"
  type: "ImageData" 
  include {
    phase: TRAIN
  }
  transform_param {
    mirror: true
    mean_file: "/home/fanglin/caffe/FaceDetection/models/deploy_2nd/48net_mean_const128.binaryproto"
  }
  image_data_param {
    source: "/media/ssd/data/aflw/data/train_detection48_noflip.txt"
    shuffle: true #cannot shuffle to ensure 48-net and 24-net are dealing with same invividual images
    new_height:48
    new_width:48
    batch_size: 256
  }
}
layer {
  name: "data_d48"
  top: "data_d48"
  top: "label_d48"
  type: "ImageData" 
  include {
    phase: TEST
    stage: "test-on-train"
  }
  transform_param {
    mean_file: "/home/fanglin/caffe/FaceDetection/models/deploy_2nd/48net_mean_const128.binaryproto"
  }
  image_data_param {
    source: "/media/ssd/data/aflw/data/train_detection48_noflip.txt"
    shuffle: true #cannot shuffle to ensure 48-net and 24-net are dealing with same invividual images
    new_height:48
    new_width:48
    batch_size: 50
  }
}
layer {
  name: "data_d48"
  top: "data_d48"
  top: "label_d48"
  type: "ImageData"
  include {
    phase: TEST
    stage: "test-on-test"
  }
  transform_param {
    mirror: false
    mean_file: "/home/fanglin/caffe/FaceDetection/models/deploy_2nd/48net_mean_const128.binaryproto"
  }
  image_data_param {
    source: "/media/ssd/data/aflw/data/faces/detection48_val_noflip.txt"
    #source: "/media/ssd/data/aflw/data/train_detection48.txt"
    new_height:48
    new_width:48
    batch_size: 50
  }
}
layer {
  name: "conv1_d48"
  type: "Convolution"
  bottom: "data_d48"
  top: "conv1_d48"
  # learning rate and decay multipliers for the filters
  param {
    lr_mult: 1
    decay_mult: 1
  }
  # learning rate and decay multipliers for the biases
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1_d48"
  type: "Pooling"
  bottom: "conv1_d48"
  top: "pool1_d48"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "relu1_d48"
  type: "ReLU"
  bottom: "pool1_d48"
  top: "pool1_d48"
}
layer {
    name: "norm1_d48"
    type: "LRN"
    bottom: "pool1_d48"
    top: "norm1_d48"
    lrn_param{
        local_size: 9
        norm_region: WITHIN_CHANNEL
    }
}
layer {
  name: "conv2_d48"
  type: "Convolution"
  bottom: "norm1_d48"
  top: "conv2_d48"
  # learning rate and decay multipliers for the filters
  param {
    lr_mult: 1
    decay_mult: 1
  }
  # learning rate and decay multipliers for the biases
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
    name: "norm2_d48"
    type: "LRN"
    bottom: "conv2_d48"
    top: "norm2_d48"
    lrn_param{
        local_size: 9
        norm_region: WITHIN_CHANNEL
    }
}
layer {
  name: "pool2_d48"
  type: "Pooling"
  bottom: "norm2_d48"
  top: "pool2_d48"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "relu2_d48"
  type: "ReLU"
  bottom: "pool2_d48"
  top: "pool2_d48"
}
layer {
  name: "fc1_d48"
  type: "InnerProduct"
  bottom: "pool2_d48"
  top: "fc1_d48"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 512 
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3_d48"
  type: "ReLU"
  bottom: "fc1_d48"
  top: "fc1_d48"
}
layer {
  name: "drop1_d48"
  type: "Dropout"
  bottom: "fc1_d48"
  top: "fc1_d48"
  dropout_param {
    dropout_ratio: 0.5
  }
}

layer {
  name: "fc2_d48"
  type: "InnerProduct"
  bottom: "fc1_d48"
  top: "fc2_d48"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "accuracy_d48"
  type: "Accuracy"
  bottom: "fc2_d48"
  bottom: "label_d48"
  top: "accuracy_d48"
  include {
    phase: TEST
  }
}
layer {
  name: "loss_d48"
  type: "SoftmaxWithLoss"
  bottom: "fc2_d48"
  bottom: "label_d48"
  top: "loss_d48"
}
